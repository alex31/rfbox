° gerer l'affichage OLED

TODO : Affichage baudrate en mode BER

/*
#define DIO2_DIRECT true or false
#define INVERT_UART_LEVEL true or false
*/

CentralData
{
set/get rssi, lnagain, ber, status, mode
}


Oled::start :
° Oled::start() : init hardware, display init msg, launch display thread
° static void display()



0/ Initialisation
|1234567890123456|
------------------
|                |
|     RfBox      |
|                |
| initialisation |
------------------


1/ BE MCU goût emission : (rf disable, mode TX)
# NORF_TX
° si DIO2_DIRECT : buffer conf TX sinon : buffer conf HiZ
° RFM en mode sleep
° broche VCP_TX en input floating
|1234567890123456|
------------------
|TX RF:Off       |
|BE Emission     |
|mode USB-Série  |
|                |
------------------

2/ BE MCU goût reception : (rf disable, mode RX)
# NORF_RX
° si DIO2_DIRECT : buffer conf RX sinon : buffer conf HiZ
° RFM en mode sleep
° broche VCP_RX en input floating
° broche VCP_TX en output pushpull HI-SPEED
° ISR EXTI : surveille VCP_RX et recopie sur VCP_TX
|1234567890123456|
------------------
|RX RF:Off       |
|BE Reception    |
|mode USB-Série  |
|                |
------------------


3/ Reception source externe
# RF_RX_EXTERNAL
° buffer conf Rx (prise en compte INVERT_UART)
° RFM en mode RX
° broche VCP_TX en input floating
|1234567890123456|
------------------
|RX 868Mhz       |
|Source Externe  |
|Lna Gain -xxx   | -> xxx -> actual gain
|RSSI -xxx       | -> xxx -> actual RSSI level
------------------

4/ Emission source externe
# RF_TX_EXTERNAL
° buffer conf Tx (prise en compte INVERT_UART)
° RFM en mode TX
° broche VCP_TX en input floating
|1234567890123456|
------------------
|TX  868Mhz      |
|Source Externe  |
|Puissance: 13dbm|
|                |
------------------

5/ Reception source interne BER
# RF_RX_INTERNAL
° si DIO2_DIRECT : buffer conf HiZ sinon : buffer conf Rx (prise en compte INVERT_UART)
° RFM en mode RX
° broche VCP_TX en usart, mode swap, inversée ou non (macro à definir)
|1234567890123456|
------------------
|RX  868Mhz      |
|BER xxxx / 1000 | -> ou "no data" si aucune reception
|Lna -xxx  19200b| -> x -> A or F ; xxx -> actual gain
|RSSI -xxx       | actual RSSI level
------------------

6/ Emission source interne BER
# RF_TX_INTERNAL
°  si DIO2_DIRECT : buffer conf HiZ sinon : buffer conf Tx (prise en compte INVERT_UART)
   *** -> dans le cas ou on est pas en DIO2_DIRECT : vérification que source
   externe ne soit pas branchée
° RFM en mode TX
° broche VCP_TX en usart, pas de swap, inversée ou non (macro à definir)
|1234567890123456|
------------------
|TX 868Mhz       |
|Mode BER        |
|Puissance: 13dbm|
|19200 b         |
------------------



============

keep for archive


enum class Label

class FieldParam
° constexpr constructor
° const length
° const fixTxt
° const pos(x,y)
° const bool active

truc declaratif : une const map FieldParamDict
key [std::pair<Ope::Mode, Label>] -> fieldParam

class Field :
° const Label
° const length
° fixTxt
° pos(x,y)
° bool active
° static std::array<Field*, NUM_FIELDS>
° void setMode(Ope::Mode) -> fabrique la clef std::pair<field, label> pour faire le lookup dans FieldParamDict
° void display(dynTxt)





class OledDisplay :
° OledDisplay() : init hardware, register all fields
° map<enum class Label, field> fieldMap
° Ope::Mode mode
° setMode(Ope::Mode mode) foreach fields : field.setMode(
° void display()
° setField(Field, fmt, ...)
